https://github.com/abhimanyu-builds/Leetcode/blob/main/Leetcode/Documentation/project-visualization-diagram.png

Description: 
Mini scalable testing framework that:
- Supports multiple problems
- Benchmarks different strategies
- Logs failures with context
- Validates flexibly (strict or relaxed)
|----------------------|--------------------------------------|--------------------------------------------------------------------------------------------|
| **Layer**            | **Component**                        | **Role / Responsibility**                                                                  |
|----------------------|--------------------------------------|--------------------------------------------------------------------------------------------|
| Orchestration        | `Program.cs`                         | Central controller that loads test cases, runs strategies, and prints results              |
| Test Harness         | `ProblemTest<TInput, TOutput>`       | Generic test runner that executes cases, validates results, logs failures, and benchmarks  |
|                      | `TestCase` record                    | Holds input, expected output, and validation mode (strict vs sum-based)                    |
| Test Case Provider   | `ITestCaseProvider<TInput, TOutput>` | Interface for generating test cases per problem                                            |
|                      | `TwoSumTestCaseProvider`             | Supplies static and randomized test cases for Two Sum                                      |
|                      | `TwoSumSortedTestCaseProvider`       | Supplies static and data-driven test cases for Two Sum Sorted                              |
| Strategy Layer       | `IProblemSolution<TInput, TOutput>`  | Interface for solving a problem with a specific algorithm                                  |
|                      | `OnOneLoopDictionarySolution`        | Fast O(n) solution for Two Sum                                                             |
|                      | `On2TwoLoopSolution`                 | Brute-force O(n²) solution for Two Sum                                                     |
|                      | `TwoSumSortedSolution`				  | Fast O(n) solution for Two Sum Sorted                                                      |
|                      | `TwoSumSortedBinarySearchSolution`   | Binary search O(nlogn) solution for Two Sum Sorted                                         |
| Strategy Registry    | `IProblemStrategy<TInput, TOutput>`  | Wraps a strategy with metadata like name                                                   |
|                      | `ProblemStrategyFactory`             | Returns all available strategies for a given problem                                       |
|                      | `TwoSumStrategies`                   | Holds the list of Two Sum strategies                                                       |
|                      | `TwoSumSortedStrategies`             | Holds the list of strategies for Two Sum II (sorted array)                                 |
|----------------------|--------------------------------------|--------------------------------------------------------------------------------------------|

